<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\FLASH\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\FLASH\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.0 [Build 947]: Last Updated: Wed Apr 09 20:16:11 2008
<BR><P>
<H3>Maximum Stack Usage =        832 bytes + Unknown(Functions without stacksize,Cycles,Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__main -> __rt_entry -> main -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c36b00]">Reset_Handler</a>
 <LI><a href="#[11f29ec]">__scatterload</a>
 <LI><a href="#[11f291c]">__scatterload_rt2</a>
 <LI><a href="#[11f296c]">__scatterload_null</a>
 <LI><a href="#[11f31f0]">__decompress</a>
 <LI><a href="#[11f31a0]">__decompress2</a>
 <LI><a href="#[11f22d0]">__scatterload_zeroinit</a>
 <LI><a href="#[c36980]">__user_initial_stackheap</a>
 <LI><a href="#[127ec20]">_ll_udiv_small</a>
 <LI><a href="#[127eba4]">_ll_udiv_big</a>
 <LI><a href="#[127eb24]">_ll_udiv_ginormous</a>
 <LI><a href="#[127eaac]">_ll_div0</a>
 <LI><a href="#[c36c6c]">DAbtHandler</a>
 <LI><a href="#[c36b7c]">FIQHandler</a>
 <LI><a href="#[c36bf4]">IRQHandler</a>
 <LI><a href="#[c36ce4]">PAbtHandler</a>
 <LI><a href="#[c36d5c]">SWIHandler</a>
 <LI><a href="#[c36dd4]">UndefHandler</a>
 <LI><a href="#[12a0e30]">__fpl_inf_dadd</a>
 <LI><a href="#[129f900]">__fpl_inf_ddiv</a>
 <LI><a href="#[129e7e0]">__fpl_inf_dfix</a>
 <LI><a href="#[11d7b60]">__dflt_normalise</a>
 <LI><a href="#[11d7028]">__fpl_inf_dmul</a>
 <LI><a href="#[129d3d4]">__fpl_inf_drem</a>
 <LI><a href="#[12a0db4]">__fpl_inf_dsub</a>
 <LI><a href="#[11d62d8]">__fpl_inf_fadd</a>
 <LI><a href="#[1287640]">__fpl_inf_fdiv</a>
 <LI><a href="#[1286814]">__fpl_inf_ffix</a>
 <LI><a href="#[1285b08]">__fpl_inf_ffixu</a>
 <LI><a href="#[1284e48]">__fflt_normalise</a>
 <LI><a href="#[1284430]">__fpl_inf_fmul</a>
 <LI><a href="#[12b101c]">__fplib_config_pureend_doubles</a>
 <LI><a href="#[11d625c]">__fpl_inf_fsub</a>
 <LI><a href="#[1295620]">__fpl_inf_scalbn</a>
 <LI><a href="#[c337b8]">IRQReturnAddress</a>
 <LI><a href="#[11dbbe0]">__arm_div4</a>
 <LI><a href="#[11dbb68]">__arm_div8</a>
 <LI><a href="#[11dbaec]">__arm_div_large</a>
 <LI><a href="#[11d66a0]">_fadd1</a>
 <LI><a href="#[11d64c4]">_fsub1</a>
 <LI><a href="#[12a10d8]">_dadd1</a>
 <LI><a href="#[12a0efc]">_dsub1</a>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3><UL>
 <LI><a href="#[1136104]">sDelay</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[1136104]">sDelay</a><BR>
</UL>
<BR>
<P><STRONG><a name="[c36b00]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, str91x.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[11d91f4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = __main -> __rt_entry -> main -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[11f29ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1282200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11f29ec]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[11d91f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11f291c]"></a>__scatterload_rt2</STRONG> (ARM, 48 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1282200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11f296c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11f31f0]"></a>__decompress</STRONG> (ARM, 120 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[11f31a0]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[11f22d0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[12a3e2c]"></a>__ARM_argv_veneer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c36980]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, str91x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12817a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c31374]"></a>ADC_DeInit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, 91x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1195978]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_Configuration
</UL>

<P><STRONG><a name="[c312fc]"></a>ADC_Init</STRONG> (ARM, 356 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195ce8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADC_config
</UL>

<P><STRONG><a name="[c31280]"></a>ADC_StructInit</STRONG> (ARM, 64 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195ce8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADC_config
</UL>

<P><STRONG><a name="[c31200]"></a>ADC_PrescalerConfig</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195ce8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADC_config
</UL>

<P><STRONG><a name="[c3117c]"></a>ADC_GetPrescalerValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c310fc]"></a>ADC_GetFlagStatus</STRONG> (ARM, 340 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Lecture
</UL>

<P><STRONG><a name="[c31080]"></a>ADC_ClearFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Lecture
</UL>

<P><STRONG><a name="[c30ffc]"></a>ADC_GetConversionValue</STRONG> (ARM, 152 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Lecture
</UL>

<P><STRONG><a name="[c30f74]"></a>ADC_GetAnalogWatchdogResult</STRONG> (ARM, 48 bytes, Stack size 0 bytes, 91x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c30ee8]"></a>ADC_ClearAnalogWatchdogResult</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c30e60]"></a>ADC_GetWatchdogThreshold</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c30de4]"></a>ADC_ITConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c30d64]"></a>ADC_StandbyModeCmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c30cf0]"></a>ADC_Cmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195ce8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADC_config
</UL>

<P><STRONG><a name="[c30c70]"></a>ADC_ConversionCmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195ce8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADC_config
</UL>

<P><STRONG><a name="[ce94c8]"></a>FMI_BankRemapConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195900]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_FMI
</UL>

<P><STRONG><a name="[ce9450]"></a>FMI_Config</STRONG> (ARM, 96 bytes, Stack size 8 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce93d4]"></a>FMI_EraseSector</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116d72c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Erase_Bank
</UL>

<P><STRONG><a name="[ce9358]"></a>FMI_EraseBank</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce92d8]"></a>FMI_WriteHalfWord</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116d6b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Write_Flash
</UL>

<P><STRONG><a name="[ce9254]"></a>FMI_WriteOTPHalfWord</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce91d8]"></a>FMI_ReadWord</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116d63c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
</UL>

<P><STRONG><a name="[ce915c]"></a>FMI_ReadOTPData</STRONG> (ARM, 48 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce90dc]"></a>FMI_GetFlagStatus</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce9054]"></a>FMI_GetReadWaitStateValue</STRONG> (ARM, 64 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce8fcc]"></a>FMI_GetWriteWaitStateValue</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce8f4c]"></a>FMI_SuspendEnable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce8ecc]"></a>FMI_ResumeEnable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce8e50]"></a>FMI_ClearFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce8dcc]"></a>FMI_WriteProtectionCmd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195900]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_FMI
</UL>

<P><STRONG><a name="[ce8d40]"></a>FMI_GetWriteProtectionStatus</STRONG> (ARM, 72 bytes, Stack size 0 bytes, 91x_fmi.o(.text), UNUSED)

<P><STRONG><a name="[ce8cb8]"></a>FMI_WaitForLastOperation</STRONG> (ARM, 76 bytes, Stack size 0 bytes, 91x_fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116d63c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
<LI><a href="#[116d6b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Write_Flash
<LI><a href="#[116d72c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Erase_Bank
</UL>

<P><STRONG><a name="[ce4b50]"></a>GPIO_DeInit</STRONG> (ARM, 496 bytes, Stack size 16 bytes, 91x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[1195d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[ce4ad8]"></a>GPIO_Init</STRONG> (ARM, 312 bytes, Stack size 28 bytes, 91x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init</UL>
<BR>[Calls]<UL><LI><a href="#[ce51ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[1195d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[cd4aec]"></a>GPIO_StructInit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 91x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd4a70]"></a>GPIO_ReadBit</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd49f8]"></a>GPIO_Read</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd497c]"></a>GPIO_WriteBit</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1135f98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
<LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[c30200]"></a>GPIO_Write</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135f20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Backlight
</UL>

<P><STRONG><a name="[c30184]"></a>GPIO_EMIConfig</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 91x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c30104]"></a>GPIO_ANAPinConfig</STRONG> (ARM, 84 bytes, Stack size 4 bytes, 91x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_ANAPinConfig</UL>
<BR>[Calls]<UL><LI><a href="#[ce5128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetAnaloClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1195d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[d010d4]"></a>I2C_DeInit</STRONG> (ARM, 88 bytes, Stack size 8 bytes, 91x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1195c68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_I2C
</UL>

<P><STRONG><a name="[d01060]"></a>I2C_Cmd</STRONG> (ARM, 52 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d00bf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[d00fe8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
<LI><a href="#[1195c68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_I2C
</UL>

<P><STRONG><a name="[d00fe8]"></a>I2C_Init</STRONG> (ARM, 528 bytes, Stack size 16 bytes, 91x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = I2C_Init -> SCU_GetPCLKFreqValue -> SCU_GetRCLKFreqValue</UL>
<BR>[Calls]<UL><LI><a href="#[d008f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPCLKFreqValue
<LI><a href="#[d01060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[11db630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1195c68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_I2C
</UL>

<P><STRONG><a name="[d00f6c]"></a>I2C_StructInit</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 91x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[d00eec]"></a>I2C_GenerateStart</STRONG> (ARM, 52 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1c640]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start_Message
<LI><a href="#[d1c6c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_Add_message
<LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d00e6c]"></a>I2C_GenerateSTOP</STRONG> (ARM, 64 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
<LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d00de8]"></a>I2C_AcknowledgeConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d00d6c]"></a>I2C_ITConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1c640]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start_Message
<LI><a href="#[d1c6c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_Add_message
<LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d00cec]"></a>I2C_ReadRegister</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[d00c6c]"></a>I2C_GetFlagStatus</STRONG> (ARM, 60 bytes, Stack size 0 bytes, 91x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[d00bf0]"></a>I2C_ClearFlag</STRONG> (ARM, 276 bytes, Stack size 20 bytes, 91x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d01060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>

<P><STRONG><a name="[d00b70]"></a>I2C_Send7bitAddress</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d00af4]"></a>I2C_SendData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d00a78]"></a>I2C_ReceiveData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d009f8]"></a>I2C_GetLastEvent</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0097c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d0097c]"></a>I2C_CheckEvent</STRONG> (ARM, 36 bytes, Stack size 4 bytes, 91x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d009f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>

<P><STRONG><a name="[d17d30]"></a>SCU_MCLKSourceConfig</STRONG> (ARM, 68 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11959f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Desactiver_PLL
<LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d17cb8]"></a>SCU_PLLCmd</STRONG> (ARM, 144 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d17c34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLFactorsConfig
<LI><a href="#[11959f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Desactiver_PLL
<LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d17c34]"></a>SCU_PLLFactorsConfig</STRONG> (ARM, 92 bytes, Stack size 8 bytes, 91x_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCU_PLLFactorsConfig</UL>
<BR>[Calls]<UL><LI><a href="#[d17cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d17bb0]"></a>SCU_RCLKDivisorConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11959f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Desactiver_PLL
<LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d17b2c]"></a>SCU_HCLKDivisorConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11959f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Desactiver_PLL
<LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d17aa8]"></a>SCU_PCLKDivisorConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11959f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Desactiver_PLL
<LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d17a20]"></a>SCU_APBPeriphClockConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[1195978]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_Configuration
</UL>

<P><STRONG><a name="[d17998]"></a>SCU_AHBPeriphClockConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195978]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_Configuration
</UL>

<P><STRONG><a name="[c30bf0]"></a>SCU_APBPeriphReset</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c31374]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[ce4b50]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[d010d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[d05c68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[d0dc60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[d11e60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[1195978]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_Configuration
</UL>

<P><STRONG><a name="[cf10a8]"></a>SCU_AHBPeriphReset</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111d1f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;VIC_DeInit
<LI><a href="#[1195978]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_Configuration
</UL>

<P><STRONG><a name="[d17914]"></a>SCU_APBPeriphIdleConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17890]"></a>SCU_AHBPeriphIdleConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17808]"></a>SCU_APBPeriphDebugConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17780]"></a>SCU_AHBPeriphDebugConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d176fc]"></a>SCU_BRCLKDivisorConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17678]"></a>SCU_TIMCLKSourceConfig</STRONG> (ARM, 84 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d175f8]"></a>SCU_TIMPresConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17578]"></a>SCU_USBCLKConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d174f8]"></a>SCU_PHYCLKConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17474]"></a>SCU_FMICLKDivisorConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11959f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Desactiver_PLL
<LI><a href="#[1195a74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
</UL>

<P><STRONG><a name="[d173ec]"></a>SCU_EMIBCLKDivisorConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d1736c]"></a>SCU_EMIModeConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d172ec]"></a>SCU_EMIALEConfig</STRONG> (ARM, 76 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17270]"></a>SCU_ITConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d171f0]"></a>SCU_GetFlagStatus</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d17174]"></a>SCU_ClearFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d170f4]"></a>SCU_GetPLLFreqValue</STRONG> (ARM, 76 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d17070]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_GetMCLKFreqValue
</UL>

<P><STRONG><a name="[d17070]"></a>SCU_GetMCLKFreqValue</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_scu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d170f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPLLFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d05bf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d16fec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_GetRCLKFreqValue
</UL>

<P><STRONG><a name="[d16fec]"></a>SCU_GetRCLKFreqValue</STRONG> (ARM, 44 bytes, Stack size 8 bytes, 91x_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCU_GetRCLKFreqValue</UL>
<BR>[Calls]<UL><LI><a href="#[d17070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetMCLKFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d008f8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPCLKFreqValue
<LI><a href="#[d16f68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_GetHCLKFreqValue
</UL>

<P><STRONG><a name="[d16f68]"></a>SCU_GetHCLKFreqValue</STRONG> (ARM, 32 bytes, Stack size 8 bytes, 91x_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d16fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetRCLKFreqValue
</UL>

<P><STRONG><a name="[d008f8]"></a>SCU_GetPCLKFreqValue</STRONG> (ARM, 32 bytes, Stack size 8 bytes, 91x_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCU_GetPCLKFreqValue -> SCU_GetRCLKFreqValue</UL>
<BR>[Calls]<UL><LI><a href="#[d16fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetRCLKFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d00fe8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d05608]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_IrDASetCounter
</UL>

<P><STRONG><a name="[d16ee4]"></a>SCU_WakeUpLineConfig</STRONG> (ARM, 152 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d16e5c]"></a>SCU_SpecIntRunModeConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d16ddc]"></a>SCU_EnterIdleMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d16d5c]"></a>SCU_EnterSleepMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d16cdc]"></a>SCU_UARTIrDASelect</STRONG> (ARM, 140 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d16c60]"></a>SCU_PFQBCCmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_scu.o(.text), UNUSED)

<P><STRONG><a name="[d11e60]"></a>SSP_DeInit</STRONG> (ARM, 88 bytes, Stack size 8 bytes, 91x_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[d11de8]"></a>SSP_Init</STRONG> (ARM, 308 bytes, Stack size 0 bytes, 91x_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[d11d6c]"></a>SSP_StructInit</STRONG> (ARM, 64 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11cf8]"></a>SSP_Cmd</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1136090]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[d11c7c]"></a>SSP_ITConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11c04]"></a>SSP_DMACmd</STRONG> (ARM, 88 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11b88]"></a>SSP_SendData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1135f98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>

<P><STRONG><a name="[d11b0c]"></a>SSP_ReceiveData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11a8c]"></a>SSP_LoopBackConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11a0c]"></a>SSP_GetFlagStatus</STRONG> (ARM, 68 bytes, Stack size 0 bytes, 91x_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1135f98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>

<P><STRONG><a name="[d11990]"></a>SSP_ClearFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11914]"></a>SSP_GetITStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d11890]"></a>SSP_ClearITPendingBit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_ssp.o(.text), UNUSED)

<P><STRONG><a name="[d0dc60]"></a>TIM_DeInit</STRONG> (ARM, 104 bytes, Stack size 8 bytes, 91x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1195b6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_timer0
</UL>

<P><STRONG><a name="[d0dbe4]"></a>TIM_StructInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0db6c]"></a>TIM_Init</STRONG> (ARM, 1048 bytes, Stack size 0 bytes, 91x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195b6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_timer0
</UL>

<P><STRONG><a name="[d0daf0]"></a>TIM_CounterCmd</STRONG> (ARM, 68 bytes, Stack size 0 bytes, 91x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195b6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_timer0
</UL>

<P><STRONG><a name="[d0da70]"></a>TIM_PrescalerConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d9ec]"></a>TIM_GetPrescalerValue</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d96c]"></a>TIM_GetCounterValue</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d8ec]"></a>TIM_GetICAP1Value</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d86c]"></a>TIM_GetICAP2Value</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d7f0]"></a>TIM_SetPulse</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d770]"></a>TIM_GetFlagStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d6f4]"></a>TIM_ClearFlag</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[d0d674]"></a>TIM_GetPWMIPulse</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d5f4]"></a>TIM_GetPWMIPeriod</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d578]"></a>TIM_ITConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195b6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_timer0
</UL>

<P><STRONG><a name="[d0d4fc]"></a>TIM_DMAConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d484]"></a>TIM_DMACmd</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d05c68]"></a>UART_DeInit</STRONG> (ARM, 128 bytes, Stack size 8 bytes, 91x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1195be8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_UART
</UL>

<P><STRONG><a name="[d05bf0]"></a>UART_Init</STRONG> (ARM, 444 bytes, Stack size 48 bytes, 91x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = UART_Init -> __aeabi_ldivmod</UL>
<BR>[Calls]<UL><LI><a href="#[d17070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetMCLKFreqValue
<LI><a href="#[11db630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11dd260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1195be8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_UART
</UL>

<P><STRONG><a name="[d05b74]"></a>UART_StructInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d05afc]"></a>UART_Cmd</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195be8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_UART
</UL>

<P><STRONG><a name="[d05a80]"></a>UART_ITConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1195be8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;configuration_UART
</UL>

<P><STRONG><a name="[d05a04]"></a>UART_DMAConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d0598c]"></a>UART_DMACmd</STRONG> (ARM, 92 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d0590c]"></a>UART_LoopBackConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d0588c]"></a>UART_GetFlagStatus</STRONG> (ARM, 84 bytes, Stack size 0 bytes, 91x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d05510]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>

<P><STRONG><a name="[d05810]"></a>UART_ClearFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d05790]"></a>UART_GetITStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d0570c]"></a>UART_ClearITPendingBit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c048]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[d05688]"></a>UART_IrDALowPowerConfig</STRONG> (ARM, 88 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d05608]"></a>UART_IrDASetCounter</STRONG> (ARM, 104 bytes, Stack size 16 bytes, 91x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d008f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPCLKFreqValue
<LI><a href="#[11db630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d0558c]"></a>UART_IrDACmd</STRONG> (ARM, 88 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d05510]"></a>UART_SendData</STRONG> (ARM, 44 bytes, Stack size 16 bytes, 91x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendData</UL>
<BR>[Calls]<UL><LI><a href="#[d0588c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[11679d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;envoie_coord
<LI><a href="#[1167a50]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;send_int_to_terminal
<LI><a href="#[1191530]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;d
</UL>

<P><STRONG><a name="[d05490]"></a>UART_ReceiveData</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 91x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111c048]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[d05414]"></a>UART_SendBreak</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d05398]"></a>UART_RTSConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d0531c]"></a>UART_DTRConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_uart.o(.text), UNUSED)

<P><STRONG><a name="[111d1f4]"></a>VIC_DeInit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, 91x_vic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VIC_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[cf10a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_AHBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1195aec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_interruption
</UL>

<P><STRONG><a name="[111d174]"></a>VIC_GetIRQStatus</STRONG> (ARM, 80 bytes, Stack size 0 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111d0f4]"></a>VIC_GetFIQStatus</STRONG> (ARM, 80 bytes, Stack size 0 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111d070]"></a>VIC_GetSourceITStatus</STRONG> (ARM, 80 bytes, Stack size 0 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111cff8]"></a>VIC_ITCmd</STRONG> (ARM, 116 bytes, Stack size 8 bytes, 91x_vic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VIC_ITCmd</UL>
<BR>[Called By]<UL><LI><a href="#[1195aec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_interruption
</UL>

<P><STRONG><a name="[111cf80]"></a>VIC_SWITCmd</STRONG> (ARM, 100 bytes, Stack size 8 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111cf00]"></a>VIC_ProtectionCmd</STRONG> (ARM, 72 bytes, Stack size 0 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111ce7c]"></a>VIC_GetCurrentISRAdd</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111cdfc]"></a>VIC_GetISRVectAdd</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_vic.o(.text), UNUSED)

<P><STRONG><a name="[111cd84]"></a>VIC_Config</STRONG> (ARM, 832 bytes, Stack size 12 bytes, 91x_vic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VIC_Config</UL>
<BR>[Calls]<UL><LI><a href="#[111ef80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ITSourceConfig
<LI><a href="#[111f000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_VectEnableConfig
<LI><a href="#[111f084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ISRVectAddConfig
<LI><a href="#[111f108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ITModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1195aec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_interruption
</UL>

<P><STRONG><a name="[1136104]"></a>sDelay</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd_str912.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1136104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d256d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Afficher_Font
<LI><a href="#[1135cc8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDWrite130x130bmp
<LI><a href="#[1135d48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSettings
<LI><a href="#[1136104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sDelay
</UL>

<P><STRONG><a name="[1136090]"></a>InitLCD</STRONG> (ARM, 244 bytes, Stack size 40 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = InitLCD -> GPIO_Init</UL>
<BR>[Calls]<UL><LI><a href="#[cd497c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ce4ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ce4b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[d11cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[d11de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[d11e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[d17a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1136014]"></a>WriteSpiCommand</STRONG> (ARM, 92 bytes, Stack size 16 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteSpiCommand</UL>
<BR>[Calls]<UL><LI><a href="#[cd497c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[d11a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[d11b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[11358fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
<LI><a href="#[11359f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetRect
<LI><a href="#[1135b58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPixelColor
<LI><a href="#[1135bd4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetXY
<LI><a href="#[1135c4c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[1135cc8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDWrite130x130bmp
<LI><a href="#[1135d48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSettings
<LI><a href="#[1135dc0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;fillWin
<LI><a href="#[1135e34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;setWin
</UL>

<P><STRONG><a name="[1135f98]"></a>WriteSpiData</STRONG> (ARM, 92 bytes, Stack size 16 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[cd497c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[d11a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[d11b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[11358fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
<LI><a href="#[11359f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetRect
<LI><a href="#[1135b58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPixelColor
<LI><a href="#[1135bd4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetXY
<LI><a href="#[1135c4c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[1135cc8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDWrite130x130bmp
<LI><a href="#[1135d48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSettings
<LI><a href="#[1135dc0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;fillWin
<LI><a href="#[1135e34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;setWin
</UL>

<P><STRONG><a name="[1135f20]"></a>Backlight</STRONG> (ARM, 36 bytes, Stack size 0 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c30200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
</UL>

<P><STRONG><a name="[1135ea8]"></a>SetContrast</STRONG> (ARM, 4 bytes, Stack size 0 bytes, lcd_str912.o(.text), UNUSED)

<P><STRONG><a name="[1135e34]"></a>setWin</STRONG> (ARM, 132 bytes, Stack size 24 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setWin -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d256d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Afficher_Font
<LI><a href="#[1135d48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSettings
</UL>

<P><STRONG><a name="[1135dc0]"></a>fillWin</STRONG> (ARM, 88 bytes, Stack size 24 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fillWin -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d256d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Afficher_Font
<LI><a href="#[1135d48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSettings
</UL>

<P><STRONG><a name="[1135d48]"></a>LCDSettings</STRONG> (ARM, 340 bytes, Stack size 8 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCDSettings -> fillWin -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillWin
<LI><a href="#[1135e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWin
<LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
<LI><a href="#[1136104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1135cc8]"></a>LCDWrite130x130bmp</STRONG> (ARM, 140 bytes, Stack size 16 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
<LI><a href="#[1136104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sDelay
</UL>

<P><STRONG><a name="[1135c4c]"></a>LCDClearScreen</STRONG> (ARM, 108 bytes, Stack size 16 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>

<P><STRONG><a name="[1135bd4]"></a>LCDSetXY</STRONG> (ARM, 64 bytes, Stack size 16 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1135ae0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
</UL>

<P><STRONG><a name="[1135b58]"></a>LCDPixelColor</STRONG> (ARM, 56 bytes, Stack size 8 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[11359f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetRect
<LI><a href="#[1135ae0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
</UL>

<P><STRONG><a name="[1135ae0]"></a>LCDSetPixel</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPixelColor
<LI><a href="#[1135bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetXY
</UL>
<BR>[Called By]<UL><LI><a href="#[1135974]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
<LI><a href="#[1135a68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetLine
</UL>

<P><STRONG><a name="[1135a68]"></a>LCDSetLine</STRONG> (ARM, 228 bytes, Stack size 40 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d256d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Afficher_Font
<LI><a href="#[11359f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDSetRect
</UL>

<P><STRONG><a name="[11359f0]"></a>LCDSetRect</STRONG> (ARM, 312 bytes, Stack size 40 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetLine
<LI><a href="#[1135b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPixelColor
<LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d25654]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_MAJ_Affichage
</UL>

<P><STRONG><a name="[1135974]"></a>LCDSetCircle</STRONG> (ARM, 320 bytes, Stack size 72 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
</UL>

<P><STRONG><a name="[11358fc]"></a>LCDPutChar</STRONG> (ARM, 364 bytes, Stack size 56 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[1136014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1135884]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>

<P><STRONG><a name="[1135884]"></a>LCDPutStr</STRONG> (ARM, 112 bytes, Stack size 40 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCDPutStr -> LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[11358fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d25654]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_MAJ_Affichage
<LI><a href="#[d256d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Afficher_Font
<LI><a href="#[d257c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Float_Right
<LI><a href="#[d2584c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Float_Left
<LI><a href="#[d258d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_String
<LI><a href="#[d25950]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Int_Right
<LI><a href="#[d259d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Int_Left
<LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[113580c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[11841fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;save_all_servos
</UL>

<P><STRONG><a name="[113580c]"></a>LCDPutInt</STRONG> (ARM, 268 bytes, Stack size 56 bytes, lcd_str912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCDPutInt -> LCDPutStr -> LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d25654]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_MAJ_Affichage
<LI><a href="#[d25950]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Int_Right
<LI><a href="#[d259d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Int_Left
<LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[1191620]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1135794]"></a>LCDPutFloat</STRONG> (ARM, 440 bytes, Stack size 64 bytes, lcd_str912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113580c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[11d6148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[12843e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1284d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1284df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1285a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1286744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[128757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d257c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Float_Right
<LI><a href="#[d2584c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_Float_Left
</UL>

<P><STRONG><a name="[d259d0]"></a>LCD_Debug_Int_Left</STRONG> (ARM, 140 bytes, Stack size 40 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113580c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>

<P><STRONG><a name="[d25950]"></a>LCD_Debug_Int_Right</STRONG> (ARM, 140 bytes, Stack size 40 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113580c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>

<P><STRONG><a name="[d258d0]"></a>LCD_Debug_String</STRONG> (ARM, 108 bytes, Stack size 24 bytes, lcd_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Debug_String -> LCDPutStr -> LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d25754]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;d_LCD
<LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[d2584c]"></a>LCD_Debug_Float_Left</STRONG> (ARM, 176 bytes, Stack size 48 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>

<P><STRONG><a name="[d257c8]"></a>LCD_Debug_Float_Right</STRONG> (ARM, 148 bytes, Stack size 48 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>

<P><STRONG><a name="[d25754]"></a>d_LCD</STRONG> (ARM, 52 bytes, Stack size 280 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d258d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_String
<LI><a href="#[11dcb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[d256d4]"></a>LCD_Afficher_Font</STRONG> (ARM, 428 bytes, Stack size 16 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[1135a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetLine
<LI><a href="#[1135dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillWin
<LI><a href="#[1135e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWin
<LI><a href="#[1136104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sDelay
</UL>

<P><STRONG><a name="[d25654]"></a>LCD_MAJ_Affichage</STRONG> (ARM, 1188 bytes, Stack size 40 bytes, lcd_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[d25474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory
<LI><a href="#[113580c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[11359f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetRect
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[d1c6c0]"></a>I2C0_Add_message</STRONG> (ARM, 92 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C0_Add_message -> add_serial_message -> insert_serial_message</UL>
<BR>[Calls]<UL><LI><a href="#[d00d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[d00eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[d1c450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_serial_message
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[d1c640]"></a>I2C0_Start_Message</STRONG> (ARM, 60 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_Start_Message</UL>
<BR>[Calls]<UL><LI><a href="#[d00d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[d00eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
</UL>
<BR>[Called By]<UL><LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[d1c5c0]"></a>I2C0_PostTraitement</STRONG> (ARM, 48 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C0_PostTraitement -> read_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
</UL>
<BR>[Called By]<UL><LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[116d72c]"></a>Erase_Bank</STRONG> (ARM, 40 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Erase_Bank</UL>
<BR>[Calls]<UL><LI><a href="#[ce8cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_WaitForLastOperation
<LI><a href="#[ce93d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[11841fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;save_all_servos
</UL>

<P><STRONG><a name="[116d6b4]"></a>Write_Flash</STRONG> (ARM, 92 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_Flash</UL>
<BR>[Calls]<UL><LI><a href="#[ce8cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_WaitForLastOperation
<LI><a href="#[ce92d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[116d5c4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Write_Servo
</UL>

<P><STRONG><a name="[116d63c]"></a>Read_Flash</STRONG> (ARM, 48 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Flash</UL>
<BR>[Calls]<UL><LI><a href="#[ce8cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_WaitForLastOperation
<LI><a href="#[ce91d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[116d54c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Read_Servo
</UL>

<P><STRONG><a name="[116d5c4]"></a>Write_Servo</STRONG> (ARM, 20 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_Servo -> Write_Flash</UL>
<BR>[Calls]<UL><LI><a href="#[116d6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[11841fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;save_all_servos
</UL>

<P><STRONG><a name="[116d54c]"></a>Read_Servo</STRONG> (ARM, 12 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Servo -> Read_Flash</UL>
<BR>[Calls]<UL><LI><a href="#[116d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1195714]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;load_all_servos
</UL>

<P><STRONG><a name="[1167a50]"></a>send_int_to_terminal</STRONG> (ARM, 180 bytes, Stack size 16 bytes, terminal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_int_to_terminal -> UART_SendData</UL>
<BR>[Calls]<UL><LI><a href="#[d05510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[11679d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;envoie_coord
</UL>

<P><STRONG><a name="[11679d4]"></a>envoie_coord</STRONG> (ARM, 344 bytes, Stack size 32 bytes, terminal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d05510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1167a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_int_to_terminal
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1181ec8]"></a>serial_list_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, serial_message.o(.text), UNUSED)

<P><STRONG><a name="[1181e44]"></a>insert_serial_message</STRONG> (ARM, 56 bytes, Stack size 8 bytes, serial_message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = insert_serial_message</UL>
<BR>[Called By]<UL><LI><a href="#[d1c450]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;add_serial_message
<LI><a href="#[1181dc4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;repeat_serial_list
</UL>

<P><STRONG><a name="[d1c450]"></a>add_serial_message</STRONG> (ARM, 72 bytes, Stack size 20 bytes, serial_message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_serial_message -> insert_serial_message</UL>
<BR>[Calls]<UL><LI><a href="#[1181e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_serial_message
</UL>
<BR>[Called By]<UL><LI><a href="#[d1c6c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_Add_message
</UL>

<P><STRONG><a name="[1181dc4]"></a>repeat_serial_list</STRONG> (ARM, 156 bytes, Stack size 28 bytes, serial_message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = repeat_serial_list -> insert_serial_message</UL>
<BR>[Calls]<UL><LI><a href="#[1181e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_serial_message
</UL>
<BR>[Called By]<UL><LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[117bde0]"></a>init_device</STRONG> (ARM, 116 bytes, Stack size 4 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_device</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[117bd64]"></a>acces_Memory</STRONG> (ARM, 60 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d253f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[d25474]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;read_Memory
<LI><a href="#[117bc68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
<LI><a href="#[117bce8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;write_Memory
</UL>

<P><STRONG><a name="[d25474]"></a>read_Memory</STRONG> (ARM, 64 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_Memory</UL>
<BR>[Calls]<UL><LI><a href="#[117bd64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acces_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[d25654]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_MAJ_Affichage
<LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[1191620]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
</UL>

<P><STRONG><a name="[117bce8]"></a>write_Memory</STRONG> (ARM, 64 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_Memory</UL>
<BR>[Calls]<UL><LI><a href="#[117bd64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acces_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[118436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Lecture
</UL>

<P><STRONG><a name="[d253f4]"></a>read_Memory_Sizeof</STRONG> (ARM, 112 bytes, Stack size 20 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[117bd64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acces_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[d1c5c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_PostTraitement
<LI><a href="#[d25654]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_MAJ_Affichage
<LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
<LI><a href="#[1154ec8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;BarBalle_RemoveArriere
<LI><a href="#[1191620]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
<LI><a href="#[11cc794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Pobeye_TraiterBalles
</UL>

<P><STRONG><a name="[117bc68]"></a>write_Memory_Sizeof</STRONG> (ARM, 104 bytes, Stack size 20 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = write_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[117bd64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acces_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
<LI><a href="#[1154ec8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;BarBalle_RemoveArriere
<LI><a href="#[1184278]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;move_servo
<LI><a href="#[11842f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;config_servo
<LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
<LI><a href="#[1195714]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;load_all_servos
<LI><a href="#[1195884]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Init_Barillet
<LI><a href="#[11cc794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Pobeye_TraiterBalles
</UL>

<P><STRONG><a name="[117bbe8]"></a>Get_Update_Memory</STRONG> (ARM, 32 bytes, Stack size 0 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[1191620]"></a>main</STRONG> (ARM, 312 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = main -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[d25474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory
<LI><a href="#[113580c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[11914b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialisation
<LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
<LI><a href="#[11915a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PathFinding
</UL>
<BR>[Called By]<UL><LI><a href="#[1282200]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c34da8]"></a>Undefined_Handler</STRONG> (ARM, 16 bytes, Stack size 8 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Undefined_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
</UL>
<BR>[Called By]<UL><LI><a href="#[c36dd4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UndefHandler
</UL>

<P><STRONG><a name="[c354f4]"></a>SWI_Handler</STRONG> (ARM, 16 bytes, Stack size 8 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = SWI_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
</UL>
<BR>[Called By]<UL><LI><a href="#[c36d5c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SWIHandler
</UL>

<P><STRONG><a name="[c32fe8]"></a>Prefetch_Handler</STRONG> (ARM, 16 bytes, Stack size 8 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Prefetch_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
</UL>
<BR>[Called By]<UL><LI><a href="#[c36ce4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PAbtHandler
</UL>

<P><STRONG><a name="[c34650]"></a>Abort_Handler</STRONG> (ARM, 16 bytes, Stack size 8 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Abort_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
</UL>
<BR>[Called By]<UL><LI><a href="#[c36c6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;DAbtHandler
</UL>

<P><STRONG><a name="[c33f04]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c36b7c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;FIQHandler
</UL>

<P><STRONG><a name="[111be4c]"></a>WDG_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c3b8]"></a>SW_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111cc88]"></a>ARMRX_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111cc08]"></a>ARMTX_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c33c]"></a>TIM0_IRQHandler</STRONG> (ARM, 216 bytes, Stack size 16 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = TIM0_IRQHandler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[d00e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[d01060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d0d6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[d1c5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_PostTraitement
<LI><a href="#[d1c640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start_Message
<LI><a href="#[1181dc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_serial_list
<LI><a href="#[118436c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Lecture
<LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c2c0]"></a>TIM1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c244]"></a>TIM2_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c1c8]"></a>TIM3_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111bfc8]"></a>USBHP_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111bf48]"></a>USBLP_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c52c]"></a>SCU_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111ca94]"></a>ENET_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111cb10]"></a>DMA_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111cb8c]"></a>CAN_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c6a4]"></a>MC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111cd08]"></a>ADC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c148]"></a>UART0_IRQHandler</STRONG> (ARM, 608 bytes, Stack size 40 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UART0_IRQHandler -> save_all_servos -> LCDPutStr -> LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[d05490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[d05510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[d0570c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[1167a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_int_to_terminal
<LI><a href="#[11841fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_servos
<LI><a href="#[1184278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_servo
<LI><a href="#[11842f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_servo
<LI><a href="#[11914b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c0c8]"></a>UART1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c048]"></a>UART2_IRQHandler</STRONG> (ARM, 56 bytes, Stack size 8 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler</UL>
<BR>[Calls]<UL><LI><a href="#[d05490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[d0570c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c818]"></a>I2C0_IRQHandler</STRONG> (ARM, 852 bytes, Stack size 32 bytes, 91x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = I2C0_IRQHandler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[d009f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[d00a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[d00af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[d00b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[d00d6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[d00de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[d00e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[d00eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[d25474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory
<LI><a href="#[117bce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory
<LI><a href="#[1191530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c79c]"></a>I2C1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c4b0]"></a>SSP0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c434]"></a>SSP1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c720]"></a>LVD_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c5a8]"></a>RTC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111bdd0]"></a>WIU_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111ca14]"></a>EXTIT0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c994]"></a>EXTIT1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c914]"></a>EXTIT2_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c894]"></a>EXTIT3_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111bec8]"></a>USBWU_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[111c624]"></a>PFQBC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(.text)
</UL>
<P><STRONG><a name="[1195d60]"></a>GPIO_config</STRONG> (ARM, 544 bytes, Stack size 32 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_config -> GPIO_Init</UL>
<BR>[Calls]<UL><LI><a href="#[c30104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ANAPinConfig
<LI><a href="#[ce4ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ce4b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195ce8]"></a>ADC_config</STRONG> (ARM, 96 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_config</UL>
<BR>[Calls]<UL><LI><a href="#[c30c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionCmd
<LI><a href="#[c30cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[c31200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PrescalerConfig
<LI><a href="#[c31280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[c312fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195c68]"></a>configuration_I2C</STRONG> (ARM, 92 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = configuration_I2C -> I2C_Init -> SCU_GetPCLKFreqValue -> SCU_GetRCLKFreqValue</UL>
<BR>[Calls]<UL><LI><a href="#[d00fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d01060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d010d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195be8]"></a>configuration_UART</STRONG> (ARM, 208 bytes, Stack size 32 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = configuration_UART -> UART_Init -> __aeabi_ldivmod</UL>
<BR>[Calls]<UL><LI><a href="#[d05a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[d05afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[d05bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d05c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195b6c]"></a>config_timer0</STRONG> (ARM, 104 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = config_timer0 -> TIM_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[d0d578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[d0daf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterCmd
<LI><a href="#[d0db6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[d0dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195aec]"></a>config_interruption</STRONG> (ARM, 124 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = config_interruption -> VIC_Config</UL>
<BR>[Calls]<UL><LI><a href="#[111cd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
<LI><a href="#[111cff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ITCmd
<LI><a href="#[111d1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195a74]"></a>Activer_PLL</STRONG> (ARM, 80 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Activer_PLL -> SCU_PLLFactorsConfig</UL>
<BR>[Calls]<UL><LI><a href="#[d17474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_FMICLKDivisorConfig
<LI><a href="#[d17aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PCLKDivisorConfig
<LI><a href="#[d17b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_HCLKDivisorConfig
<LI><a href="#[d17bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_RCLKDivisorConfig
<LI><a href="#[d17c34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLFactorsConfig
<LI><a href="#[d17cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLCmd
<LI><a href="#[d17d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[11959f8]"></a>Desactiver_PLL</STRONG> (ARM, 56 bytes, Stack size 8 bytes, config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d17474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_FMICLKDivisorConfig
<LI><a href="#[d17aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PCLKDivisorConfig
<LI><a href="#[d17b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_HCLKDivisorConfig
<LI><a href="#[d17bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_RCLKDivisorConfig
<LI><a href="#[d17cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLCmd
<LI><a href="#[d17d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCLKSourceConfig
</UL>

<P><STRONG><a name="[1195978]"></a>SCU_Configuration</STRONG> (ARM, 228 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCU_Configuration -> ADC_DeInit</UL>
<BR>[Calls]<UL><LI><a href="#[c30bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
<LI><a href="#[c31374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[cf10a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_AHBPeriphReset
<LI><a href="#[d17998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_AHBPeriphClockConfig
<LI><a href="#[d17a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[1195900]"></a>config_FMI</STRONG> (ARM, 48 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_FMI</UL>
<BR>[Calls]<UL><LI><a href="#[ce8dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_WriteProtectionCmd
<LI><a href="#[ce94c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_BankRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[11914b4]"></a>initialisation</STRONG> (ARM, 660 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = initialisation -> LCD_Debug_String -> LCDPutStr -> LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[cd497c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[d1c6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Add_message
<LI><a href="#[d258d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug_String
<LI><a href="#[1135d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSettings
<LI><a href="#[1136090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
<LI><a href="#[117bde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device
<LI><a href="#[11915a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PathFinding
<LI><a href="#[1195714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_servos
<LI><a href="#[1195790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Strategie
<LI><a href="#[119580c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pobeye
<LI><a href="#[1195884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Barillet
<LI><a href="#[1195900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_FMI
<LI><a href="#[1195978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Configuration
<LI><a href="#[1195a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activer_PLL
<LI><a href="#[1195aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_interruption
<LI><a href="#[1195b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_timer0
<LI><a href="#[1195be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_UART
<LI><a href="#[1195c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_I2C
<LI><a href="#[1195ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_config
<LI><a href="#[1195d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>
<BR>[Called By]<UL><LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1191620]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1191530]"></a>d</STRONG> (ARM, 80 bytes, Stack size 288 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[d05510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[11dcb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c32fe8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
<LI><a href="#[c34650]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
<LI><a href="#[c34da8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
<LI><a href="#[c354f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
<LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
<LI><a href="#[111c818]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[1191620]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11aab50]"></a>load_robot_adverse</STRONG> (ARM, 148 bytes, Stack size 0 bytes, pathfinding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11915a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Init_PathFinding
</UL>

<P><STRONG><a name="[11915a0]"></a>Init_PathFinding</STRONG> (ARM, 72 bytes, Stack size 4 bytes, pathfinding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_PathFinding</UL>
<BR>[Calls]<UL><LI><a href="#[11aab50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_robot_adverse
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
<LI><a href="#[1191620]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11aaacc]"></a>Calcul_Score_terrain</STRONG> (ARM, 252 bytes, Stack size 32 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11aaa4c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Calcul_poids_case
</UL>

<P><STRONG><a name="[11aaa4c]"></a>Calcul_poids_case</STRONG> (ARM, 312 bytes, Stack size 52 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11aaacc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcul_Score_terrain
</UL>
<BR>[Called By]<UL><LI><a href="#[11aa9cc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Calculer_Score_Case
</UL>

<P><STRONG><a name="[11aa9cc]"></a>Calculer_Score_Case</STRONG> (ARM, 176 bytes, Stack size 44 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11aaa4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcul_poids_case
</UL>
<BR>[Called By]<UL><LI><a href="#[11aa950]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Evaluer_voisins
</UL>

<P><STRONG><a name="[11aa950]"></a>Evaluer_voisins</STRONG> (ARM, 232 bytes, Stack size 32 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11aa9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculer_Score_Case
</UL>
<BR>[Called By]<UL><LI><a href="#[11aa6e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PathFinding
</UL>

<P><STRONG><a name="[11aa8d0]"></a>Start_PathFinding</STRONG> (ARM, 324 bytes, Stack size 28 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11aa6e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PathFinding
</UL>

<P><STRONG><a name="[11aa850]"></a>Simplifier_Chemin</STRONG> (ARM, 256 bytes, Stack size 40 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11aa7dc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Chemin
</UL>

<P><STRONG><a name="[11aa7dc]"></a>Chemin</STRONG> (ARM, 236 bytes, Stack size 144 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11aa850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simplifier_Chemin
</UL>
<BR>[Called By]<UL><LI><a href="#[11aa6e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PathFinding
</UL>

<P><STRONG><a name="[11aa760]"></a>MAJ_PathFinding</STRONG> (ARM, 204 bytes, Stack size 28 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11aa6e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PathFinding
</UL>

<P><STRONG><a name="[11aa6e8]"></a>PathFinding</STRONG> (ARM, 420 bytes, Stack size 56 bytes, pathfinding.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11aa760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAJ_PathFinding
<LI><a href="#[11aa7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chemin
<LI><a href="#[11aa8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PathFinding
<LI><a href="#[11aa950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evaluer_voisins
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1195714]"></a>load_all_servos</STRONG> (ARM, 96 bytes, Stack size 24 bytes, servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = load_all_servos -> write_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[116d54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Servo
<LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[11841fc]"></a>save_all_servos</STRONG> (ARM, 140 bytes, Stack size 32 bytes, servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = save_all_servos -> LCDPutStr -> LCDPutChar -> WriteSpiData</UL>
<BR>[Calls]<UL><LI><a href="#[1135884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[116d5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Servo
<LI><a href="#[116d72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Bank
</UL>
<BR>[Called By]<UL><LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[11842f0]"></a>config_servo</STRONG> (ARM, 48 bytes, Stack size 8 bytes, servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = config_servo -> write_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
</UL>
<BR>[Called By]<UL><LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1184278]"></a>move_servo</STRONG> (ARM, 28 bytes, Stack size 0 bytes, servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = move_servo -> write_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
</UL>
<BR>[Called By]<UL><LI><a href="#[111c148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[1195884]"></a>Init_Barillet</STRONG> (ARM, 184 bytes, Stack size 8 bytes, barillet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_Barillet -> write_Memory_Sizeof</UL>
<BR>[Calls]<UL><LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
</UL>
<BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[11552d0]"></a>Barillet_AddTask</STRONG> (ARM, 80 bytes, Stack size 4 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11cc794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Pobeye_TraiterBalles
</UL>

<P><STRONG><a name="[1155250]"></a>Barillet_SaveTask</STRONG> (ARM, 64 bytes, Stack size 8 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[11551d4]"></a>BarListe_Trier</STRONG> (ARM, 180 bytes, Stack size 12 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[1155150]"></a>BarListe_RemoveTaskNum</STRONG> (ARM, 168 bytes, Stack size 12 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[11550cc]"></a>BarListe_RemoveTaskType</STRONG> (ARM, 212 bytes, Stack size 20 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[115504c]"></a>BarGet_VideAvant</STRONG> (ARM, 180 bytes, Stack size 8 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[1154fc8]"></a>BarGet_CouleurArriere</STRONG> (ARM, 188 bytes, Stack size 12 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[1154f4c]"></a>BarGet_Bloquer</STRONG> (ARM, 36 bytes, Stack size 0 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[1154ec8]"></a>BarBalle_RemoveArriere</STRONG> (ARM, 216 bytes, Stack size 8 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
</UL>
<BR>[Called By]<UL><LI><a href="#[1154e44]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Barillet_MachineEtat
</UL>

<P><STRONG><a name="[1154e44]"></a>Barillet_MachineEtat</STRONG> (ARM, 772 bytes, Stack size 32 bytes, barillet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[1154ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarBalle_RemoveArriere
<LI><a href="#[1154f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarGet_Bloquer
<LI><a href="#[1154fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarGet_CouleurArriere
<LI><a href="#[115504c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarGet_VideAvant
<LI><a href="#[11550cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarListe_RemoveTaskType
<LI><a href="#[1155150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarListe_RemoveTaskNum
<LI><a href="#[11551d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarListe_Trier
<LI><a href="#[1155250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barillet_SaveTask
<LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
<LI><a href="#[1184278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_servo
</UL>

<P><STRONG><a name="[1195790]"></a>Init_Strategie</STRONG> (ARM, 16 bytes, Stack size 0 bytes, strategie.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[11d1bc8]"></a>wait_fin_TE</STRONG> (ARM, 24 bytes, Stack size 0 bytes, strategie.o(.text), UNUSED)

<P><STRONG><a name="[119580c]"></a>Init_Pobeye</STRONG> (ARM, 16 bytes, Stack size 0 bytes, pobeye.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11914b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;initialisation
</UL>

<P><STRONG><a name="[11cc794]"></a>Pobeye_TraiterBalles</STRONG> (ARM, 256 bytes, Stack size 16 bytes, pobeye.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[11552d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barillet_AddTask
<LI><a href="#[117bc68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory_Sizeof
</UL>

<P><STRONG><a name="[118436c]"></a>IR_Lecture</STRONG> (ARM, 240 bytes, Stack size 24 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_Lecture -> write_Memory</UL>
<BR>[Calls]<UL><LI><a href="#[c30ffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[c31080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[c310fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[117bce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Memory
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111c33c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[11c6fac]"></a>IR_Traiter_Adverse</STRONG> (ARM, 580 bytes, Stack size 56 bytes, ir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d253f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory_Sizeof
<LI><a href="#[d25474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Memory
<LI><a href="#[11d6084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1283014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1283b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[12843e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1284d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[11dd260]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod</UL>
<BR>[Called By]<UL><LI><a href="#[d05bf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11dd1e8]"></a>_ll_sdiv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127ea5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[11dcb74]"></a>vsprintf</STRONG> (ARM, 60 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1278f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[12796e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d25754]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;d_LCD
<LI><a href="#[1191530]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;d
</UL>

<P><STRONG><a name="[11db954]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[11db8d4]"></a>__aeabi_idiv_div0</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[11db800]"></a>__aeabi_idivmod</STRONG> (ARM, 364 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12811b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv0
</UL>
<BR>[Called By]<UL><LI><a href="#[d170f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPLLFreqValue
<LI><a href="#[d25654]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCD_MAJ_Affichage
<LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[113580c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutInt
<LI><a href="#[11679d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;envoie_coord
<LI><a href="#[1167a50]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;send_int_to_terminal
<LI><a href="#[118436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Lecture
<LI><a href="#[11aa6e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PathFinding
<LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
<LI><a href="#[128b744]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_addexp
<LI><a href="#[12997e0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[11db850]"></a>__aeabi_idivmod_div0</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[11d9aa4]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[11d9a1c]"></a>__rt_stackheap_init</STRONG> (ARM, 60 bytes, Stack size 24 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init -> __user_setup_stackheap</UL>
<BR>[Calls]<UL><LI><a href="#[127fe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[12817a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1282200]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d9994]"></a>__rt_heap_extend</STRONG> (ARM, 20 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d9b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[1283b34]"></a>cos</STRONG> (ARM, 240 bytes, Stack size 40 bytes, cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127e0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[129155c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[12956a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
<LI><a href="#[1283ab8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__softfp_cos
</UL>

<P><STRONG><a name="[1283ab8]"></a>__softfp_cos</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1283b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1283014]"></a>sin</STRONG> (ARM, 256 bytes, Stack size 40 bytes, sin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127e0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[129155c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[12956a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
<LI><a href="#[1282f98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__softfp_sin
</UL>

<P><STRONG><a name="[1282f98]"></a>__softfp_sin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1283014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[1282200]"></a>__rt_entry</STRONG> (ARM, 44 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = __rt_entry -> main -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1191620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11d9a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
<LI><a href="#[12a1bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[12a21bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[12a3d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
<LI><a href="#[12a7cac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d91f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11f291c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[12820b8]"></a>__rt_exit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit -> __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[12a3d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[12a7cac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1282040]"></a>__rt_abort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kernel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1290bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[12817a0]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap</UL>
<BR>[Calls]<UL><LI><a href="#[c36980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1290568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11d9a1c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[12811b0]"></a>__aeabi_idiv0</STRONG> (ARM, 4 bytes, Stack size 0 bytes, aeabi_idiv0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11db800]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[127fe94]"></a>__rt_stackheap_storage</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d9a1c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[127ea5c]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 16 bytes, lludiv5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11dd1e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[127e9e4]"></a>_ll_udiv</STRONG> (ARM, 712 bytes, Stack size 16 bytes, lludiv5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128f088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldiv0
</UL>

<P><STRONG><a name="[127ec20]"></a>_ll_udiv_small</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[127eba4]"></a>_ll_udiv_big</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[127eb24]"></a>_ll_udiv_ginormous</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[127eaac]"></a>_ll_div0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[127e104]"></a>__read_errno</STRONG> (ARM, 20 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[128e50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[127e0b4]"></a>__set_errno</STRONG> (ARM, 24 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[128e50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1283014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1283b34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[127d9bc]"></a>_printf_pre_padding</STRONG> (ARM, 84 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding</UL>
<BR>[Called By]<UL><LI><a href="#[127c510]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[127cca0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[128b5fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[128beec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[127d96c]"></a>_printf_post_padding</STRONG> (ARM, 72 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding</UL>
<BR>[Called By]<UL><LI><a href="#[127c510]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[127cca0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[128b5fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[128beec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[127d308]"></a>_printf_truncate_signed</STRONG> (ARM, 36 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127ab30]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[127d2b8]"></a>_printf_truncate_unsigned</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127ab30]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[127b204]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[127bab4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[127cca0]"></a>_printf_str</STRONG> (ARM, 156 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str -> _printf_post_padding</UL>
<BR>[Calls]<UL><LI><a href="#[127d96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[127d9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[127c510]"></a>_printf_wctomb</STRONG> (ARM, 324 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb -> _wcrtomb -> __rt_ctype_table</UL>
<BR>[Calls]<UL><LI><a href="#[127d96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[127d9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12a835c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[127bab4]"></a>_printf_longlong_hex</STRONG> (ARM, 284 bytes, Stack size 72 bytes, _printf_longlong_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _printf_longlong_hex -> _printf_int_common -> _printf_post_padding</UL>
<BR>[Calls]<UL><LI><a href="#[127d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[128beec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[127b204]"></a>_printf_longlong_oct</STRONG> (ARM, 228 bytes, Stack size 72 bytes, _printf_longlong_oct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _printf_longlong_oct -> _printf_int_common -> _printf_post_padding</UL>
<BR>[Calls]<UL><LI><a href="#[127d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[128beec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[127ab30]"></a>_printf_int_dec</STRONG> (ARM, 172 bytes, Stack size 64 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_int_dec -> _printf_int_common -> _printf_post_padding</UL>
<BR>[Calls]<UL><LI><a href="#[127d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[127d308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[128beec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[12a7640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[127a418]"></a>_printf_longlong_dec</STRONG> (ARM, 208 bytes, Stack size 72 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _printf_longlong_dec -> _printf_int_common -> _printf_post_padding</UL>
<BR>[Calls]<UL><LI><a href="#[128beec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[128d2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1279cd4]"></a>_printf_charcount</STRONG> (ARM, 60 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[12796e8]"></a>_printf_char_common</STRONG> (ARM, 80 bytes, Stack size 88 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[128cc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11dcb74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1278f4c]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11dcb74]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[12934c0]"></a>__kernel_cos</STRONG> (ARM, 376 bytes, Stack size 64 bytes, cos_i.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12956a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[129cafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[129e710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12a0bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12a0ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1283014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1283b34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[129276c]"></a>__ieee754_rem_pio2</STRONG> (ARM, 1208 bytes, Stack size 120 bytes, rred.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11d7a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11db630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[12956a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[129d384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[129e710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[129f83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12a0bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12a0ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12a0d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1283014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1283b34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[129155c]"></a>__kernel_sin</STRONG> (ARM, 360 bytes, Stack size 56 bytes, sin_i.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12956a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[129cafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[129e710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12a0bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12a0ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12a0d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1283014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1283b34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1290bb0]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1282040]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
</UL>

<P><STRONG><a name="[1290440]"></a>__user_libspace</STRONG> (ARM, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1290568]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12817a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12904e0]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[128f088]"></a>__aeabi_ldiv0</STRONG> (ARM, 4 bytes, Stack size 0 bytes, aeabi_ldiv0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127e9e4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL>

<P><STRONG><a name="[128e50c]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127e0b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[127e104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[128e598]"></a>__rt_errno_addr_intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[128d2fc]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10</UL>
<BR>[Called By]<UL><LI><a href="#[127a418]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[128cc04]"></a>__printf</STRONG> (ARM, 1168 bytes, Stack size 48 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[1279cd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
<LI><a href="#[127a418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[127ab30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[127b204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[127bab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[127c510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[127cca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[128cb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[128cb88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[1294dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12796e8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[128beec]"></a>_printf_int_common</STRONG> (ARM, 288 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common -> _printf_post_padding</UL>
<BR>[Calls]<UL><LI><a href="#[127d96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[127d9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[127a418]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[127ab30]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[127b204]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[127bab4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[128b6c4]"></a>__lib_sel_fp_printf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[128b64c]"></a>_fp_display</STRONG> (ARM, 1288 bytes, Stack size 72 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[128b744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_addexp
<LI><a href="#[128b7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[129aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12b0a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_classify
</UL>
<BR>[Called By]<UL><LI><a href="#[128b5fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[128b5fc]"></a>_printf_fp_dec_real</STRONG> (ARM, 424 bytes, Stack size 56 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[127d96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[127d9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[128b64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1294dc0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1289098]"></a>_printf_outstr_char</STRONG> (ARM, 52 bytes, Stack size 16 bytes, _printf_outstr_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_outstr_char</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1288acc]"></a>_printf_input_char</STRONG> (ARM, 20 bytes, Stack size 0 bytes, _printf_input_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[12a835c]"></a>_wcrtomb</STRONG> (ARM, 116 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb -> __rt_ctype_table</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[129bd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[127c510]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[12a7cac]"></a>exit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exit -> __rt_exit -> __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[12820b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[12a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1282200]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12a7640]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127ab30]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[12a3d60]"></a>__rt_lib_init</STRONG> (ARM, 244 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __rt_lib_init -> _get_lc_ctype -> strcmp</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[129aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[12a3450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[12a34c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[12a353c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc (Weak Reference)
<LI><a href="#[12a35bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[12a3634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[12a36b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[12a372c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[12a3828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[12a38a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[12a3920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[12a3998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[12a3a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[12a3b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[12a3b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize (Weak Reference)
<LI><a href="#[12a3c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[12a3e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
<LI><a href="#[12acecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[12b1128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
<LI><a href="#[12b5300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>
<BR>[Called By]<UL><LI><a href="#[1282200]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12a3d10]"></a>__rt_lib_shutdown</STRONG> (ARM, 28 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[12a32d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[12a3350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc (Weak Reference)
<LI><a href="#[12a3a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[12820b8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[12a21bc]"></a>_platform_post_stackheap_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1282200]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12a1bfc]"></a>_platform_post_lib_init</STRONG> (ARM, 12 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init</UL>
<BR>[Called By]<UL><LI><a href="#[1282200]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[129cafc]"></a>__kernel_poly</STRONG> (ARM, 244 bytes, Stack size 24 bytes, poly.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12a0d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[12934c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[129c2d0]"></a>__I_use_semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[129c248]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[129bd00]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table</UL>
<BR>[Calls]<UL><LI><a href="#[129aa5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[12a835c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[129aa5c]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128b64c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_display
<LI><a href="#[129bd00]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12997e0]"></a>_btod_etento</STRONG> (ARM, 312 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[1298610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1298660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12b5300]"></a>_get_lc_numeric</STRONG> (ARM, 56 bytes, Stack size 8 bytes, lc_numeric_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric -> strcmp</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[12aa1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12b22f0]"></a>__ARM_get_argv</STRONG> (ARM, 4 bytes, Stack size 0 bytes, no_argv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lib_init.o(.emb_text)
</UL>
<P><STRONG><a name="[12b0a6c]"></a>__mathlib_classify</STRONG> (ARM, 64 bytes, Stack size 16 bytes, classify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_classify -> __ARM_fpclassify</UL>
<BR>[Calls]<UL><LI><a href="#[12a9610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[128b64c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_display
</UL>

<P><STRONG><a name="[12b0350]"></a>__support_dtoi</STRONG> (ARM, 116 bytes, Stack size 24 bytes, dtoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __support_dtoi</UL>
<BR>[Calls]<UL><LI><a href="#[12956a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12ae930]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b1128]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[12acecc]"></a>_get_lc_ctype</STRONG> (ARM, 56 bytes, Stack size 8 bytes, lc_ctype_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype -> strcmp</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[12aa1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[12aa1f0]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp</UL>
<BR>[Called By]<UL><LI><a href="#[12acecc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[12b5300]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[12a9610]"></a>__ARM_fpclassify</STRONG> (ARM, 56 bytes, Stack size 16 bytes, fpclassify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_fpclassify</UL>
<BR>[Called By]<UL><LI><a href="#[12b0a6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__mathlib_classify
</UL>

<P><STRONG><a name="[11db784]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[11db704]"></a>__aeabi_uidiv_div0</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[11db630]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[11dbaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[11dbb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
<LI><a href="#[11dbbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
</UL>
<BR>[Called By]<UL><LI><a href="#[d00fe8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d05608]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_IrDASetCounter
<LI><a href="#[d05bf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[11db680]"></a>__aeabi_uidivmod_div0</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[12986b0]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[12b838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12b8310]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[12b838c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[12b838c]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[12b8310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[12986b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[12b8038]"></a>__btod_div_common</STRONG> (ARM, 712 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common</UL>
<BR>[Called By]<UL><LI><a href="#[1298660]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[12b81ac]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e</UL>
<BR>[Called By]<UL><LI><a href="#[1298610]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1298660]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1298660]"></a>_btod_ediv</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv -> __btod_div_common</UL>
<BR>[Calls]<UL><LI><a href="#[12b8038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
<LI><a href="#[12b81ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[12997e0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1298610]"></a>_btod_emul</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[12b80b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[12b81ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[12997e0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[12b80b8]"></a>__btod_mult_common</STRONG> (ARM, 612 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common</UL>
<BR>[Called By]<UL><LI><a href="#[1298610]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[c36c6c]"></a>DAbtHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dabt.o(DAbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = DAbtHandler -> Abort_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[c34650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[c36b7c]"></a>FIQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fiq.o(FIQ))
<BR><BR>[Calls]<UL><LI><a href="#[c33f04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[c36bf4]"></a>IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[c36ce4]"></a>PAbtHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, pabt.o(PAbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = PAbtHandler -> Prefetch_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[c32fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[c36d5c]"></a>SWIHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi.o(SWI))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = SWIHandler -> SWI_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[c354f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[c36dd4]"></a>UndefHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, undef.o(Undef))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = UndefHandler -> Undefined_Handler -> d -> vsprintf -> _printf_char_common -> __printf -> _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[c34da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str91x.o(Reset)
</UL>
<P><STRONG><a name="[12a0d64]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[129cafc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[12a0cf0]"></a>_dadd</STRONG> (ARM, 452 bytes, Stack size 8 bytes, daddsub.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1298410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[12a0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[12a0e30]"></a>__fpl_inf_dadd</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[1298410]"></a>__fpl_dcheck_NaN2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129db0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[11d6f64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[129d384]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[129f7c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[12a0b68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[12a0cf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1297d98]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[129db0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[12956a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[129e69c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[129f83c]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[129f7c8]"></a>_ddiv</STRONG> (ARM, 448 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1298410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[129f74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv_mantissas
</UL>

<P><STRONG><a name="[129f900]"></a>__fpl_inf_ddiv</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ddiv.o(x$fpl$ddiv), UNUSED)

<P><STRONG><a name="[129f74c]"></a>_ddiv_mantissas</STRONG> (ARM, 600 bytes, Stack size 28 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129f7c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[129e710]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[129e69c]"></a>_dfix</STRONG> (ARM, 172 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1297d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[129e7e0]"></a>__fpl_inf_dfix</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dfix.o(x$fpl$dfix), UNUSED)

<P><STRONG><a name="[11d7a24]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[11d79b0]"></a>_dflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, dflt.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[11d7b60]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[11d6fd8]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[129cafc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[11d6f64]"></a>_dmul</STRONG> (ARM, 448 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1298410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[11d7028]"></a>__fpl_inf_dmul</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dmul.o(x$fpl$dmul), UNUSED)

<P><STRONG><a name="[129d384]"></a>_drem</STRONG> (ARM, 480 bytes, Stack size 16 bytes, drem.o(x$fpl$drem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1298410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>
<BR>[Called By]<UL><LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[129d3d4]"></a>__fpl_inf_drem</STRONG> (ARM, 0 bytes, Stack size unknown bytes, drem.o(x$fpl$drem), UNUSED)

<P><STRONG><a name="[12a0ca0]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[12a0c2c]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[12a10d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[12a0bdc]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[12a0b68]"></a>_dsub</STRONG> (ARM, 608 bytes, Stack size 8 bytes, daddsub.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1298410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[12a10d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[12a0db4]"></a>__fpl_inf_dsub</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[129779c]"></a>__dunder</STRONG> (ARM, 272 bytes, Stack size 4 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[1297724]"></a>__dunder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[11d620c]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
</UL>

<P><STRONG><a name="[11d6198]"></a>_fadd</STRONG> (ARM, 260 bytes, Stack size 0 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1296fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[11d62d8]"></a>__fpl_inf_fadd</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[1296fcc]"></a>__fpl_fcheck_NaN2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck.o(x$fpl$fcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129db0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[11d6010]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[11d6198]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[128436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1287508]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[12969d8]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129db0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[12859c4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[12866d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ffix
</UL>

<P><STRONG><a name="[128757c]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
</UL>

<P><STRONG><a name="[1287508]"></a>_fdiv</STRONG> (ARM, 476 bytes, Stack size 4 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1296fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[1287640]"></a>__fpl_inf_fdiv</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fdiv.o(x$fpl$fdiv), UNUSED)

<P><STRONG><a name="[1286744]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
</UL>

<P><STRONG><a name="[12866d0]"></a>_ffix</STRONG> (ARM, 112 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[12969d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[1286814]"></a>__fpl_inf_ffix</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffix.o(x$fpl$ffix), UNUSED)

<P><STRONG><a name="[1285a38]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
</UL>

<P><STRONG><a name="[12859c4]"></a>_ffixu</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[12969d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[1285b08]"></a>__fpl_inf_ffixu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffixu.o(x$fpl$ffixu), UNUSED)

<P><STRONG><a name="[1284d34]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
</UL>

<P><STRONG><a name="[1284cc0]"></a>_fflt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fflt.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1284e48]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1284d84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[1284df8]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
</UL>

<P><STRONG><a name="[1284d84]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1284e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[12843e0]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
<LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
</UL>

<P><STRONG><a name="[128436c]"></a>_fmul</STRONG> (ARM, 264 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1296fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[1284430]"></a>__fpl_inf_fmul</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[12963e0]"></a>__fpl_normalise2</STRONG> (ARM, 80 bytes, Stack size 4 bytes, fnorm2.o(x$fpl$fnorm2), UNUSED)

<P><STRONG><a name="[12b1128]"></a>_fp_init</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init</UL>
<BR>[Calls]<UL><LI><a href="#[12ae930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12b101c]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[11d6148]"></a>__aeabi_frsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1135794]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;LCDPutFloat
</UL>

<P><STRONG><a name="[11d60d4]"></a>_frsb</STRONG> (ARM, 20 bytes, Stack size 0 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[11d66a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[11d6084]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c6fac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IR_Traiter_Adverse
</UL>

<P><STRONG><a name="[11d6010]"></a>_fsub</STRONG> (ARM, 312 bytes, Stack size 0 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d66a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1296fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[11d625c]"></a>__fpl_inf_fsub</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[1295dbc]"></a>__funder</STRONG> (ARM, 140 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[1295d6c]"></a>__funder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[1294dc0]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _printf_fp_dec -> _printf_fp_dec_real -> _fp_display -> _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[128b5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1294770]"></a>_printf_fp_hex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2), UNUSED)

<P><STRONG><a name="[129db0c]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[12b1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[12969d8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[1296fcc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[1297d98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[1298410]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[1295444]"></a>__ARM_scalbn</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn_clz.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[12954c0]"></a>scalbln</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn_clz.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[1295534]"></a>scalblnl</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn_clz.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[12956a0]"></a>scalbn</STRONG> (ARM, 108 bytes, Stack size 0 bytes, scalbn_clz.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[11d899c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[1297d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1283014]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1283b34]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[129155c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[129276c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[12934c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[12b0350]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__support_dtoi
</UL>

<P><STRONG><a name="[12955ac]"></a>scalbnl</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn_clz.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[1295620]"></a>__fpl_inf_scalbn</STRONG> (ARM, 0 bytes, Stack size unknown bytes, scalbn_clz.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[12b1d40]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[129db0c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[c337b8]"></a>IRQReturnAddress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR>[Address Reference Count : 1]<UL><LI> irq.o(IRQ)
</UL>
<P><STRONG><a name="[ce51ac]"></a>GPIO_GetGPIONumber</STRONG> (ARM, 188 bytes, Stack size 0 bytes, 91x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce4ad8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[ce5128]"></a>GPIO_GetAnaloClearBits</STRONG> (ARM, 136 bytes, Stack size 0 bytes, 91x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIO_ANAPinConfig
</UL>

<P><STRONG><a name="[111f108]"></a>VIC_ITModeConfig</STRONG> (ARM, 116 bytes, Stack size 0 bytes, 91x_vic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111cd84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[111f084]"></a>VIC_ISRVectAddConfig</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 91x_vic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111cd84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[111f000]"></a>VIC_VectEnableConfig</STRONG> (ARM, 52 bytes, Stack size 0 bytes, 91x_vic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111cd84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[111ef80]"></a>VIC_ITSourceConfig</STRONG> (ARM, 80 bytes, Stack size 0 bytes, 91x_vic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111cd84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[11dbbe0]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11db630]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11dbb68]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11db630]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11dbaec]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11db630]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11d66a0]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6010]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[11d60d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[11d64c4]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d60d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[11d6198]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[128b7bc]"></a>_fp_digits</STRONG> (ARM, 740 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits -> _btod_etento -> _btod_emul -> _e2e</UL>
<BR>[Calls]<UL><LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[128d2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[1298610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1298660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[12986b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[12997e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12b0350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_dtoi
</UL>
<BR>[Called By]<UL><LI><a href="#[128b64c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_display
</UL>

<P><STRONG><a name="[128b744]"></a>_fp_addexp</STRONG> (ARM, 112 bytes, Stack size 16 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fp_addexp</UL>
<BR>[Calls]<UL><LI><a href="#[11db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[127dfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[128b64c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_display
</UL>

<P><STRONG><a name="[12a10d8]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a0b68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[12a0c2c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[12a0efc]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a0c2c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[12a0cf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[12a3c14]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[127dfb4]"></a>__ARM_stackcheck</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[127e0b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__set_errno (Weak Reference)
<LI><a href="#[127e104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__read_errno (Weak Reference)
<LI><a href="#[128b5fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (Weak Reference)
<LI><a href="#[128b64c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_display (Weak Reference)
<LI><a href="#[128b744]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_addexp (Weak Reference)
<LI><a href="#[128b7bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (Weak Reference)
<LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
<LI><a href="#[12997e0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (Weak Reference)
<LI><a href="#[12a3d10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
<LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
<LI><a href="#[12a7cac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
<LI><a href="#[12a835c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (Weak Reference)
<LI><a href="#[12acecc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[12b5300]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
</UL>

<P><STRONG><a name="[12a3b98]"></a>__Heap_DescSize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a3b18]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a3a90]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a3a14]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[11d899c]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6010]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fsub (Weak Reference)
<LI><a href="#[11d6198]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fadd (Weak Reference)
<LI><a href="#[11d6f64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dmul (Weak Reference)
<LI><a href="#[128436c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fmul (Weak Reference)
<LI><a href="#[12859c4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ffixu (Weak Reference)
<LI><a href="#[12866d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ffix (Weak Reference)
<LI><a href="#[1287508]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fdiv (Weak Reference)
<LI><a href="#[12956a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;scalbn (Weak Reference)
<LI><a href="#[129d384]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_drem (Weak Reference)
<LI><a href="#[129e69c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dfix (Weak Reference)
<LI><a href="#[129f7c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ddiv (Weak Reference)
<LI><a href="#[12a0b68]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dsub (Weak Reference)
<LI><a href="#[12a0cf0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_dadd (Weak Reference)
</UL>

<P><STRONG><a name="[11d9b78]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d9994]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[12a3998]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a7bdc]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a7cac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[12a3920]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a38a4]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a3828]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a372c]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a36b0]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a3634]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a35bc]"></a>_init_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a353c]"></a>_init_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a34c8]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[128cb88]"></a>_printf_mbtowc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[128cb10]"></a>_printf_wc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[128cc04]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[12a3450]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a33d4]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d60]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12a3350]"></a>_terminate_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[12a32d4]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12a3d10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
